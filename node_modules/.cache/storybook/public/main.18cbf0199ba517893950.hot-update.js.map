{"version":3,"file":"main.18cbf0199ba517893950.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AAJA;AAAA;AAAA;AAAA;AAMA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAGA;AA3EA;AA6EA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://ui-kit/./src/stories/IconRIghtButton.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { FC } from \\\"react\\\";\\nimport {ReactComponent as largeIcon} from '../assets/largeIcon.svg';\\nimport mediumIcon from '../assets/mediumIcon.svg';\\nimport smallIcon from '../assets/smallIcon.svg';\\nimport \\\"./IconRightButton.css\\\";\\n\\nexport enum ButtonSize {\\n  large = 'large',\\n  small = 'small',\\n  medium = 'medium',\\n}\\n\\nexport enum ButtonType {\\n  primary = 'primary',\\n  primaryInverse = 'primaryInverse',\\n  secondary = 'secondary',\\n  tertiary = 'tertiary',\\n  ghost = 'ghost',\\n  warning = 'warning',\\n  skeleton = 'skeleton',\\n}\\n\\nexport interface ButtonProps {\\n  color?: string;\\n  children: React.ReactNode;\\n  size: ButtonSize;\\n  variant: ButtonType;\\n  disabled?: Boolean;\\n}\\n\\nexport const IconRightButton: FC<ButtonProps> = ({ children, color, size, variant, disabled, ...props }) => {\\n  const rootClasses = [\\\"iconRightButton\\\"];\\n  \\n  \\n  if (size === ButtonSize.small) {\\n    rootClasses.push('small-btn')\\n  }\\n  if (size === ButtonSize.medium) {\\n    rootClasses.push('medium-btn')\\n  }\\n  if (size === ButtonSize.large) {\\n    rootClasses.push('large-btn')\\n  }\\n  if (variant === ButtonType.primary) {\\n    rootClasses.push('primary')\\n    if (disabled) {\\n      rootClasses.push('primary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.primaryInverse) {\\n    rootClasses.push('primaryInverse')\\n    if (disabled) {\\n      rootClasses.push('primaryInverse-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.secondary) {\\n    rootClasses.push('secondary')\\n    if (disabled) {\\n      rootClasses.push('secondary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.tertiary) {\\n    rootClasses.push('tertiary')\\n    if (disabled) {\\n      rootClasses.push('tertiary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.ghost) {\\n    rootClasses.push('ghost')\\n    if (disabled) {\\n      rootClasses.push('ghost-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.warning) {\\n    rootClasses.push('warning')\\n    if (disabled) {\\n      rootClasses.push('warning-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.skeleton) {\\n    rootClasses.push('skeleton')\\n    if (disabled) {\\n      rootClasses.push('skeleton-disabled')\\n    }\\n  }\\n  \\n  let icon = null;\\n  if (size === ButtonSize.small) {\\n    icon = <img src={smallIcon} alt=\\\"\\\" />;\\n  } else if (size === ButtonSize.medium) {\\n    icon = <img src={mediumIcon} alt=\\\"\\\" />;\\n  } else if (size === ButtonSize.large) {\\n    icon = <img src={largeIcon} alt=\\\"\\\" />;\\n  }\\n\\n  return (\\n    <button {...props} className={rootClasses.join(' ')} style={{}}>\\n      <span>{children}</span>\\n      {icon && (\\n        <span>\\n          {icon}\\n        </span>\\n      )}\\n    </button>\\n  );\\n};\\n\\nexport default IconRightButton;\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"IconRightButton\":{\"startLoc\":{\"col\":48,\"line\":31},\"endLoc\":{\"col\":1,\"line\":106},\"startBody\":{\"col\":48,\"line\":31},\"endBody\":{\"col\":1,\"line\":106}}};\n    \nimport React, { FC } from \"react\";\nimport {ReactComponent as largeIcon} from '../assets/largeIcon.svg';\nimport mediumIcon from '../assets/mediumIcon.svg';\nimport smallIcon from '../assets/smallIcon.svg';\nimport \"./IconRightButton.css\";\n\nexport enum ButtonSize {\n  large = 'large',\n  small = 'small',\n  medium = 'medium',\n}\n\nexport enum ButtonType {\n  primary = 'primary',\n  primaryInverse = 'primaryInverse',\n  secondary = 'secondary',\n  tertiary = 'tertiary',\n  ghost = 'ghost',\n  warning = 'warning',\n  skeleton = 'skeleton',\n}\n\nexport interface ButtonProps {\n  color?: string;\n  children: React.ReactNode;\n  size: ButtonSize;\n  variant: ButtonType;\n  disabled?: Boolean;\n}\n\nexport const IconRightButton: FC<ButtonProps> = ({ children, color, size, variant, disabled, ...props }) => {\n  const rootClasses = [\"iconRightButton\"];\n  \n  \n  if (size === ButtonSize.small) {\n    rootClasses.push('small-btn')\n  }\n  if (size === ButtonSize.medium) {\n    rootClasses.push('medium-btn')\n  }\n  if (size === ButtonSize.large) {\n    rootClasses.push('large-btn')\n  }\n  if (variant === ButtonType.primary) {\n    rootClasses.push('primary')\n    if (disabled) {\n      rootClasses.push('primary-disabled')\n    }\n  }\n  if (variant === ButtonType.primaryInverse) {\n    rootClasses.push('primaryInverse')\n    if (disabled) {\n      rootClasses.push('primaryInverse-disabled')\n    }\n  }\n  if (variant === ButtonType.secondary) {\n    rootClasses.push('secondary')\n    if (disabled) {\n      rootClasses.push('secondary-disabled')\n    }\n  }\n  if (variant === ButtonType.tertiary) {\n    rootClasses.push('tertiary')\n    if (disabled) {\n      rootClasses.push('tertiary-disabled')\n    }\n  }\n  if (variant === ButtonType.ghost) {\n    rootClasses.push('ghost')\n    if (disabled) {\n      rootClasses.push('ghost-disabled')\n    }\n  }\n  if (variant === ButtonType.warning) {\n    rootClasses.push('warning')\n    if (disabled) {\n      rootClasses.push('warning-disabled')\n    }\n  }\n  if (variant === ButtonType.skeleton) {\n    rootClasses.push('skeleton')\n    if (disabled) {\n      rootClasses.push('skeleton-disabled')\n    }\n  }\n  \n  let icon = null;\n  if (size === ButtonSize.small) {\n    icon = <img src={smallIcon} alt=\"\" />;\n  } else if (size === ButtonSize.medium) {\n    icon = <img src={mediumIcon} alt=\"\" />;\n  } else if (size === ButtonSize.large) {\n    icon = <img src={largeIcon} alt=\"\" />;\n  }\n\n  return (\n    <button {...props} className={rootClasses.join(' ')} style={{}}>\n      <span>{children}</span>\n      {icon && (\n        <span>\n          {icon}\n        </span>\n      )}\n    </button>\n  );\n};\n\nexport default IconRightButton;\n\n\nIconRightButton.parameters = { storySource: { source: \"({ children, color, size, variant, disabled, ...props }) => {\\n  const rootClasses = [\\\"iconRightButton\\\"];\\n  \\n  \\n  if (size === ButtonSize.small) {\\n    rootClasses.push('small-btn')\\n  }\\n  if (size === ButtonSize.medium) {\\n    rootClasses.push('medium-btn')\\n  }\\n  if (size === ButtonSize.large) {\\n    rootClasses.push('large-btn')\\n  }\\n  if (variant === ButtonType.primary) {\\n    rootClasses.push('primary')\\n    if (disabled) {\\n      rootClasses.push('primary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.primaryInverse) {\\n    rootClasses.push('primaryInverse')\\n    if (disabled) {\\n      rootClasses.push('primaryInverse-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.secondary) {\\n    rootClasses.push('secondary')\\n    if (disabled) {\\n      rootClasses.push('secondary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.tertiary) {\\n    rootClasses.push('tertiary')\\n    if (disabled) {\\n      rootClasses.push('tertiary-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.ghost) {\\n    rootClasses.push('ghost')\\n    if (disabled) {\\n      rootClasses.push('ghost-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.warning) {\\n    rootClasses.push('warning')\\n    if (disabled) {\\n      rootClasses.push('warning-disabled')\\n    }\\n  }\\n  if (variant === ButtonType.skeleton) {\\n    rootClasses.push('skeleton')\\n    if (disabled) {\\n      rootClasses.push('skeleton-disabled')\\n    }\\n  }\\n  \\n  let icon = null;\\n  if (size === ButtonSize.small) {\\n    icon = <img src={smallIcon} alt=\\\"\\\" />;\\n  } else if (size === ButtonSize.medium) {\\n    icon = <img src={mediumIcon} alt=\\\"\\\" />;\\n  } else if (size === ButtonSize.large) {\\n    icon = <img src={largeIcon} alt=\\\"\\\" />;\\n  }\\n\\n  return (\\n    <button {...props} className={rootClasses.join(' ')} style={{}}>\\n      <span>{children}</span>\\n      {icon && (\\n        <span>\\n          {icon}\\n        </span>\\n      )}\\n    </button>\\n  );\\n}\" }, ...IconRightButton.parameters };"],"names":[],"sourceRoot":""}